//this class represent "static" vertex
class Vertex {
    constructor(x, y) {
        Object.defineProperty(
            this,
            'x', {
              value: x
            }
        );
        Object.defineProperty(
            this,
            'y', {
              value: y
            }
        );
    }

    //can get refrected vertex for line generated by edge
    getRefrectedVertexFor(edge) {
        const line = edge.getLine();
        const distance = this.getDistanceTo(edge.getLine());
        const normalVec2D = line.directionVec2D.getNormalVec();
        const vecToResult = normalVec2D.getMultiplicatedVecBy(distance).getMultiplicatedVecBy(2);
        return this.getVertexActionBy(vecToResult);
    }

    getVertexActionBy(vec2D) {
        return new Vertex(this.x + vec2D.x, this.y + vec2D.y);
    }

    getVec2DTo(vertex) {
        return new Vec2D(vertex.x - this.x, vertex.y - this.y);
    }

    getDistanceTo(line) {
        let normalLine = new Line(this, line.directionVec2D.getNormalVec());
        let crossVertex = normalLine.getCrossVertexTo(line);
        return this.getDistanceBetween(crossVertex);
    }

    getDistanceBetween(vertex) {
        return Math.sqrt(Math.pow(this.x - vertex.x, 2) + Math.pow(this.y - vertex.y, 2));
    }

    getVec2D() {
        return new Vec2D(this.x, this.y);
    }

    draw() {
        circle(this.x, this.y, 10);
    }
}